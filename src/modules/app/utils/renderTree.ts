// utils/renderTree.ts
import { NodeFS } from "../../files/adapters/NodeFS.js";

type RenderTreeOptions = {
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (1 = —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞, 3 ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) */
  maxDepth?: number;
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Ñ–∞–π–ª—ã */
  showFiles?: boolean;
  /** –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ ("" = –≤—Å—ë) */
  filter?: string;
  /** –ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç –∏–º—ë–Ω (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ) */
  ignore?: string[];
};

type TreeNode = {
  name: string;
  isDir: boolean;
  children?: TreeNode[];
};

// ‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const DEFAULTS: Required<RenderTreeOptions> = {
  maxDepth: 3,
  showFiles: true,
  filter: "",
  ignore: [
    ".git",
    "node_modules",
    ".DS_Store",
    "dist",
    "vendor",
    "venv",
    "__pycache__",
  ],
};

export async function renderTree(dirPath: string, opts: RenderTreeOptions = {}) {
  const options = { ...DEFAULTS, ...opts };
  const fs = new NodeFS();

  async function build(dir: string, depth: number): Promise<TreeNode[]> {
    if (depth > options.maxDepth) return [];

    const entries = await fs.readdir(dir);
    const nodes: TreeNode[] = [];

    for (const e of entries) {
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∏–º–µ–Ω–∞
      if (options.ignore.includes(e.name)) continue;

      if (e.isDir) {
        const abs = fs.join(dir, e.name);
        const children = await build(abs, depth + 1);

        // –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –∏–ª–∏ —É –Ω–µ—ë –µ—Å—Ç—å –¥–µ—Ç–∏
        const nameMatches = !options.filter || e.name.includes(options.filter);
        if (children.length > 0 || nameMatches) {
          nodes.push({ name: e.name, isDir: true, children });
        }
      } else if (options.showFiles) {
        if (options.filter && !e.name.includes(options.filter)) continue;
        nodes.push({ name: e.name, isDir: false });
      }
    }

    // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    nodes.sort((a, b) => {
      if (a.isDir !== b.isDir) return a.isDir ? -1 : 1;
      return a.name.localeCompare(b.name);
    });

    return nodes;
  }

  function print(nodes: TreeNode[], prefix = "") {
    nodes.forEach((node, idx) => {
      const isLast = idx === nodes.length - 1;
      const branch = isLast ? "‚îî‚îÄ‚îÄ " : "‚îú‚îÄ‚îÄ ";
      const nextPrefix = prefix + (isLast ? "    " : "‚îÇ   ");

      if (node.isDir) {
        console.log(`${prefix}${branch}üìÅ ${node.name}/`);
        if (node.children && node.children.length) {
          print(node.children, nextPrefix);
        }
      } else {
        console.log(`${prefix}${branch}üìÑ ${node.name}`);
      }
    });
  }

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  console.log(`üìÇ ${dirPath}`);
  const rootChildren = await build(dirPath, 1);
  if (rootChildren.length === 0) {
    console.log("‚îî‚îÄ‚îÄ (empty or filtered)");
    return;
  }
  print(rootChildren);
}
